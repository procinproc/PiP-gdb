name: pip-glibc-libpip-gdb Docker image

on: 

  repository_dispatch:
    types: [pip-gdb-rpm-built, pip-gdb-docker-invoke]
  #    github.event.client_payload.distros: ["centos7", "centos8"]
  #    github.event.client_payload.archtypes: ["multiarch", "amd64", "arm64"]
  #    github.event.client_payload.pip_versions: ["2", "3"]
  #    github.event.client_payload.pip_minor_version: ".HEAD" or something

jobs:

  build:

    strategy:
      fail-fast: false
      matrix:
        distro: ${{ github.event.client_payload.distros }}
        archtype: ${{ github.event.client_payload.archtypes }}
        pip_version: ${{ github.event.client_payload.pip_versions }}

    runs-on: ubuntu-latest

    steps:

      - name: determine platforms and tag for Docker
        id: docker-config
        run: |
          set -x
          case ${{ matrix.archtype }} in
          multiarch)
            platforms=linux/amd64,linux/arm64
            archsuffix=
            ;;
          *)
            platforms=linux/${{ matrix.archtype }}
            archsuffix=-${{ matrix.archtype }}
            ;;
          esac
          echo "::set-output name=platforms::$platforms"
          echo "::set-output name=tag::${{ matrix.pip_version }}${{ github.event.client_payload.pip_minor_version }}-${{ matrix.distro }}${archsuffix}"
           
      - name: sparse checkout default branch
        run: |
          git clone --filter=blob:none --no-checkout --depth 1 --sparse https://github.com/${GITHUB_REPOSITORY}.git .
          git sparse-checkout init --cone
          git sparse-checkout add .github releng/docker
          git checkout
          ls -CF
          ls -CFR .github releng/docker

      - name: Setup QEMU user-mode emulation
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: releng/docker
          platforms: ${{ steps.docker-config.outputs.platforms }}
          file: releng/docker/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USER }}/pip-glibc-libpip-gdb:${{ steps.docker-config.outputs.tag }}
          build-args: |
             DOCKER_BASE=${{ secrets.DOCKERHUB_USER }}/pip-glibc-libpip:${{ matrix.pip_version }}.HEAD-${{ matrix.distro }}
             PIP_VERSION=${{ matrix.pip_version }}
             DISTRO=${{ matrix.distro }}
             GITHUB_REPOSITORY=${{ github.repository }}
             PIP_BUILD_TOKEN=${{ secrets.PIP_BUILD_TOKEN }}
          push: true

  dispatch:

    needs: [build]

    strategy:
      matrix:
        repo: ['${{ github.repository_owner }}/PiP-pip']

    runs-on: ubuntu-latest

    steps:

      - name: determine archs
        id: archs
        run: |
          set -x
          if ${{ contains(github.event.client_payload.archtypes, 'multiarch') }}
          then
            archs='[ "amd64", "arm64" ]'
          else
            archs="["
            comma=""
            if ${{ contains(github.event.client_payload.archtypes, 'amd64') }}
            then
               archs="${archs}${comma}\"amd64\""
               comma=","
            fi
            if ${{ contains(github.event.client_payload.archtypes, 'arm64') }}
            then
               archs="${archs}${comma}\"arm64\""
               comma=","
            fi
            archs="${archs}]"
          fi
          echo "distros=<${{ github.event.client_payload.distros }}>"
          echo "toJSON(distros)=<${{ toJSON(github.event.client_payload.distros) }}>"
          echo "archtypes=<${{ github.event.client_payload.archtypes }}>"
          echo "toJSON(archtypes)=<${{ toJSON(github.event.client_payload.archtypes) }}>"
          echo "::set-output name=archs::${archs}"
          echo "pip_versions=<${{ github.event.client_payload.pip_versions }}>"
          echo "toJSON(pip_versions)=<${{ toJSON(github.event.client_payload.pip_versions) }}>"

      - name: dispatch event
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PIP_BUILD_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: pip-gdb-built
          client-payload: '{ "distros": ${{ toJSON(github.event.client_payload.distros) }}, "archs": ${{ steps.archs.outputs.archs }}, "pip_versions": ${{ toJSON(github.event.client_payload.pip_versions) }}, "dispatch": true  }'
